# -*- coding: utf-8 -*-
"""Python Fake Review Analyzer with SVM

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oIYV-DKEDFBYXzJJiNYH8VWdwyDbvdJa
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
import pandas as pd
import os

try:
    df = pd.read_csv('fake rev.csv')
    df['label'] = df['label'].map({'OR': 0, 'CG': 1})
    print(df['label'].value_counts())
    reviews = df['text_'].tolist()
    labels = df['label'].tolist()
    print(f"Successfully loaded and processed the dataset from {df}.")
except FileNotFoundError:
    print(f"Error: The file {df} was not found. Exiting...")
    quit()

vectorizer = TfidfVectorizer(stop_words='english')

X_train = vectorizer.fit_transform(reviews)
svm_model = SVC(kernel='linear')
print("Training the SVM model...")

if reviews:
    svm_model.fit(X_train, labels)
    print("Training complete!")
else:
    print("Training skipped due to missing data.")
review_input = widgets.Textarea(
    value='',
    placeholder='enter the review',
    description='Enter the\nprompt',
    disabled=False,
    layout=widgets.Layout(width='100%', height='150px')
)
analyze_button = widgets.Button(
    description='Analyze',
    disabled=False,
    button_style='primary',
    tooltip='Click to analyze the review',
    icon='check'
)
output_area = widgets.Output()
def analyze_review(b):
    with output_area:
        clear_output()
        review_text = review_input.value.strip()
        if not review_text:
            print("Please enter a review to analyze.")
            return
        print("Analyzing review...")
        try:
            review_vectorized = vectorizer.transform([review_text])
            prediction = svm_model.predict(review_vectorized)
            print(type(prediction))
            if prediction[0] == 0:
                sentiment = "Genuine"
                reasoning = "The model classified this as a genuine review based on the linguistic patterns it learned from the training data."
            elif prediction[0] == 1:
                sentiment = "Fake"
                reasoning = "The model classified this as a fake review based on the linguistic patterns it learned from the training data."
            else:
                sentiment = "Unknown"
                reasoning = "The model could not classify this review."
            print("--- Analysis Result ---")
            print(f"Prediction: {sentiment}")
            print(f"Reasoning: {reasoning}")
        except Exception as e:
            print(f"An error occurred: {e}")
analyze_button.on_click(analyze_review)
print("Welcome to the Fake Review Analyzer!")
print("Enter a review below and click 'Analyze'.")
display(widgets.VBox([review_input, analyze_button, output_area]))

!pip install ipywidgets scikit-learn